/*
** main.c for gtk in /home/loic/dev/epitech/cpp/Nibbler/gtk
**
** Made by lefloc_l
** Login <lefloc_l@epitech.eu>
**
** Started on  jeu. mars 13 10:01:02 2014 lefloc_l
** Last update mar. mars 18 17:44:24 2014 lefloc_l
*/

#include <iostream>
#include <gtkmm.h>
#include <glib.h>

#include "./Window.hh"

#define G_LOG_DOMAIN ((gchar *) 0)

/*
** compilation : g++ main.c `pkg-config gtkmm-3.0 --cflags --libs`
*/

/*
 * log_level G_LOG_LEVEL_ERROR -> create exception autommaticaly :) it's like throw
 */
static void	my_log_handler(const gchar *log_domain, GLogLevelFlags log_level,
    const gchar *message,
    gpointer user_data)
{
  if (log_level == G_LOG_LEVEL_CRITICAL)
    std::cerr << "\033[1;31mCritical error: " << message << "\033[0m" << std::endl;
  else if (log_level == G_LOG_LEVEL_WARNING)
    std::cerr << "\033[4;33mWarning:\033[0m " << message << "\033[0m" << std::endl;
  else if (log_level ==  G_LOG_LEVEL_MESSAGE)
    std::cout << "\033[4;34mMessage:\033[0m " << message << "\033[0m" << std::endl;
  else if (log_level ==  G_LOG_LEVEL_INFO)
    std::cout << "\033[4;32mInfo:\033[0m " << message << "\033[0m" << std::endl;
  else if (log_level ==  G_LOG_LEVEL_DEBUG)
    std::cout << "\033[0;32m" << message << "\033[0m" << std::endl;
  else
    std::cerr << "Unknow log_level." << std::endl;
  return ;
}


int	main(int ac, char *av[])
{
  Glib::RefPtr<Gtk::Application> app = Gtk::Application::create(ac, av, "org.gtkmm.examples.base");
  g_log_set_handler(G_LOG_DOMAIN, G_LOG_LEVEL_MASK, my_log_handler, NULL);

  Window	win;

  return app->run(win);
}

